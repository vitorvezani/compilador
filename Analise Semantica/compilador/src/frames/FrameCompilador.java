package frames;

import compilador.AnalisadorSemantico;
import compilador.AnalisadorSintatico;
import compilador.AnaliseException;
import utilidades.Log;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoundedRangeModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Element;
import javax.swing.text.Highlighter;
import javax.swing.text.Utilities;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Vitor Rodrigo Vezani && Pedro Henrique Grandin
 *
 */
public class FrameCompilador extends javax.swing.JFrame {

    /**
     * Creates new form Compilador
     */
    public FrameCompilador() {
        initComponents();
        this.setLocationRelativeTo(null);
        jTextAreaCodigo.setFocusable(rootPaneCheckingEnabled);

        // Iniciamos a thread do relógio. Tornei uma deamon thread para que seja  
        // automaticamente finalizada caso a aplicação feche.  
        Thread clockThread = new Thread(new ClockRunnable(), "Clock thread");
        clockThread.setDaemon(true);
        clockThread.start();

        BoundedRangeModel model = jScrollPaneAreaCodigo.getVerticalScrollBar().getModel();
        jScrollPaneAreaLinhas.getVerticalScrollBar().setModel(model);
        jTextAreaCodigo.requestFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneAreaCodigo = new javax.swing.JScrollPane();
        jTextAreaCodigo = new javax.swing.JTextArea();
        jTextAreaSaida = new javax.swing.JTextArea();
        jLabelSaida = new javax.swing.JLabel();
        jLabelCodigoFonte = new javax.swing.JLabel();
        jTextFieldLinhaColuna = new javax.swing.JTextField();
        jScrollPaneAreaLinhas = new javax.swing.JScrollPane();
        jTextAreaLinhas = new javax.swing.JTextArea();
        jLabelCodigoLinhas = new javax.swing.JLabel();
        jPanelCompilacao = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanelFooter = new javax.swing.JPanel();
        jLabelFooter = new javax.swing.JLabel();
        jLabelFooterTime = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemFechar = new javax.swing.JMenuItem();
        jMenuItemSalvar = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparatorArquivo = new javax.swing.JPopupMenu.Separator();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuSobre = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador");

        jTextAreaCodigo.setColumns(20);
        jTextAreaCodigo.setRows(5);
        jTextAreaCodigo.setTabSize(2);
        jTextAreaCodigo.setToolTipText("Texto do código");
        jTextAreaCodigo.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextAreaCodigoCaretUpdate(evt);
            }
        });
        jScrollPaneAreaCodigo.setViewportView(jTextAreaCodigo);
        jTextAreaCodigo.getDocument().addDocumentListener(new DocumentListener(){
            public String getText(){
                int caretPosition = jTextAreaCodigo.getDocument().getLength();
                Element root = jTextAreaCodigo.getDocument().getDefaultRootElement();
                String text = "1" + System.getProperty("line.separator");
                for(int i = 2; i < root.getElementIndex( caretPosition ) + 2; i++){
                    text += i + System.getProperty("line.separator");
                }
                return text;
            }
            @Override
            public void changedUpdate(DocumentEvent de) {
                jTextAreaLinhas.setText(getText());
            }

            @Override
            public void insertUpdate(DocumentEvent de) {
                jTextAreaLinhas.setText(getText());
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                jTextAreaLinhas.setText(getText());
            }

        });

        jTextAreaSaida.setEditable(false);
        jTextAreaSaida.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaSaida.setColumns(20);
        jTextAreaSaida.setRows(1);
        jTextAreaSaida.setTabSize(2);
        jTextAreaSaida.setToolTipText("Texto de saída");
        jTextAreaSaida.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextAreaSaida.setEnabled(false);

        jLabelSaida.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelSaida.setText("Saida");

        jLabelCodigoFonte.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelCodigoFonte.setText("Código Fonte");

        jTextFieldLinhaColuna.setEditable(false);
        jTextFieldLinhaColuna.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextFieldLinhaColuna.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldLinhaColuna.setText("Linha: 0, Coluna: 0");
        jTextFieldLinhaColuna.setToolTipText("Linha e Coluna");
        jTextFieldLinhaColuna.setBorder(null);
        jTextFieldLinhaColuna.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldLinhaColuna.setEnabled(false);
        jTextFieldLinhaColuna.setFocusable(false);

        jScrollPaneAreaLinhas.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAreaLinhas.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextAreaLinhas.setEditable(false);
        jTextAreaLinhas.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaLinhas.setColumns(20);
        jTextAreaLinhas.setRows(5);
        jTextAreaLinhas.setTabSize(2);
        jTextAreaLinhas.setText("1");
        jTextAreaLinhas.setToolTipText("Indicador de linhas");
        jTextAreaLinhas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPaneAreaLinhas.setViewportView(jTextAreaLinhas);

        jLabelCodigoLinhas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelCodigoLinhas.setText("Linhas");

        jPanelCompilacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Compilação"));

        jButton1.setText("Compilar");
        jButton1.setToolTipText("Botão de Compilação");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCompilacaoLayout = new javax.swing.GroupLayout(jPanelCompilacao);
        jPanelCompilacao.setLayout(jPanelCompilacaoLayout);
        jPanelCompilacaoLayout.setHorizontalGroup(
            jPanelCompilacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCompilacaoLayout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanelCompilacaoLayout.setVerticalGroup(
            jPanelCompilacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCompilacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelFooter.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanelFooterLayout = new javax.swing.GroupLayout(jPanelFooter);
        jPanelFooter.setLayout(jPanelFooterLayout);
        jPanelFooterLayout.setHorizontalGroup(
            jPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelFooter, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelFooterTime, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        jPanelFooterLayout.setVerticalGroup(
            jPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelFooter, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
            .addComponent(jLabelFooterTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenuArquivo.setText("Arquivo");

        jMenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAbrir.setText("Abrir...");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemAbrir);

        jMenuItemFechar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemFechar.setText("Fechar...");
        jMenuItemFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFecharActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemFechar);

        jMenuItemSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSalvar.setText("Salvar...");
        jMenuItemSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalvarActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemSalvar);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Salvar como...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItem1);
        jMenuArquivo.add(jSeparatorArquivo);

        jMenuItemSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemSair);

        jMenuBar.add(jMenuArquivo);

        jMenuSobre.setText("Sobre");
        jMenuSobre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuSobreMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuSobre);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelCodigoLinhas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPaneAreaLinhas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelSaida)
                                    .addComponent(jTextFieldLinhaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextAreaSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jPanelCompilacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(jScrollPaneAreaCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabelCodigoFonte)))
                .addContainerGap(17, Short.MAX_VALUE))
            .addComponent(jPanelFooter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCodigoFonte)
                    .addComponent(jLabelCodigoLinhas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPaneAreaCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneAreaLinhas, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldLinhaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelSaida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextAreaSaida)
                    .addComponent(jPanelCompilacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addComponent(jPanelFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuSobreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSobreMouseClicked
        FrameSobre frameSobre = new FrameSobre();
        frameSobre.setLayout(new BorderLayout());
        frameSobre.setLocationRelativeTo(null);
        frameSobre.setVisible(true);
    }//GEN-LAST:event_jMenuSobreMouseClicked

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
        try {
            sPathArquivo = (getPatchFile());
        } catch (IOException ex) {
            Logger.getLogger(FrameCompilador.class.getName()).log(Level.SEVERE, null, ex);
        }

        try (FileReader arq = new FileReader(sPathArquivo)) {

            limparTextos();

            BufferedReader lerArq = new BufferedReader(arq);

            String linha = null;
            String aux = null;

            // lê a primeira linha
            // a variável "linha" recebe o valor "null" quando o processo
            // de repetição atingir o final do arquivo texto
            do {
                if (linha == null) {
                    linha = lerArq.readLine();
                }

                aux = linha;

                linha = lerArq.readLine();

                if (linha == null) {

                    jTextAreaCodigo.append(aux);
                } else {
                    jTextAreaCodigo.append(aux + '\n');
                }

            } while (linha != null); // lê da segunda até a última linha

            arq.close();

        } catch (IOException e) {
            sPathArquivo = null;
            fCurrentFile = null;
        }

    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        System.exit(1);
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    private void jMenuItemFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFecharActionPerformed

        limparTextos();
        //Limpa path do arquivo
        sPathArquivo = null;

    }//GEN-LAST:event_jMenuItemFecharActionPerformed

    private void jMenuItemSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalvarActionPerformed

        salvar();

    }//GEN-LAST:event_jMenuItemSalvarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        salvarComo();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        limparSaida();

        if (!jTextAreaCodigo.getText().isEmpty()) {

            AnalisadorSintatico analiseSintatico = new AnalisadorSintatico(jTextAreaCodigo.getText());

            try {
                analiseSintatico.analiseSintatica();
                
                Highlighter hHighlight = jTextAreaCodigo.getHighlighter();
                hHighlight.removeAllHighlights();
                JOptionPane.showMessageDialog(null, "Programa compilado com sucesso!");

            } catch (AnaliseException e) {

                selecionaLinhaErro(e);

            }

            Log.printarTabelaSimbolosFinal(AnalisadorSemantico.getlListaSimbolos());

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextAreaCodigoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextAreaCodigoCaretUpdate
        setaLinhaColuna();
    }//GEN-LAST:event_jTextAreaCodigoCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrameCompilador().setVisible(true);
            }
        });
    }

    private void limparTextos() {
        jTextAreaSaida.setText(null);
        jTextAreaCodigo.setText(null);
    }

    private void limparSaida() {
        jTextAreaSaida.setText(null);
    }

    private void atualizaFooter(final String sTexto) {
        new Thread() {
            @Override
            public void run() {

                jLabelFooter.setText(sTexto);

                try {
                    Thread.sleep(2500);

                    jLabelFooter.setText("");

                } catch (Exception e) {
                    System.out.println("hehehe" + e);
                }

            }
        }.start();
    }

    public void salvar() {
        if (sPathArquivo != null) {
            try (FileWriter fw = new FileWriter(sPathArquivo)) {
                fw.write(jTextAreaCodigo.getText());
                fw.close();
                atualizaFooter("Arquivo salvo com sucesso!");
            } catch (FileNotFoundException fnfe) {
                System.err.println("FileNotFoundException: " + fnfe.getMessage());
            } catch (IOException ioe) {
                System.err.println("IOException: " + ioe.getMessage());
            }
        } else {
            salvarComo();
        }
    }

    public void salvarComo() {
        try {
            File current = new File(".");
            JFileChooser chooser = new JFileChooser(current);
            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int approval = chooser.showSaveDialog(this);
            if (approval == JFileChooser.APPROVE_OPTION) {
                File newFile = chooser.getSelectedFile();
                if (newFile.exists()) {
                    String message = newFile.getAbsolutePath()
                            + " já existe. \n"
                            + "Voce deseja subistitui-lo?";
                    if (JOptionPane.showConfirmDialog(this, message) == JOptionPane.YES_OPTION) {
                        fCurrentFile = newFile;
                        setTitle(fCurrentFile.getName());
                        try (FileWriter fw = new FileWriter(fCurrentFile)) {
                            fw.write(jTextAreaCodigo.getText());
                        }
                        atualizaFooter("Arquivo '" + fCurrentFile.getName() + "' salvo com sucesso!");
                    }
                } else {
                    fCurrentFile = new File(newFile.getAbsolutePath());
                    setTitle(fCurrentFile.getName());
                    try (FileWriter fw = new FileWriter(fCurrentFile)) {
                        fw.write(jTextAreaCodigo.getText());
                    }
                    atualizaFooter("Arquivo '" + fCurrentFile.getName() + "' salvo com sucesso!");
                }
            }
        } catch (FileNotFoundException fnfe) {
            System.err.println("FileNotFoundException: " + fnfe.getMessage());
        } catch (IOException ioe) {
            System.err.println("IOException: " + ioe.getMessage());
        }
    }

    private void selecionaLinhaErro(AnaliseException e) {
        int nLineNumber;
        int nStartIndex;
        int nEndIndex;

        try {
            jTextAreaSaida.setText(e.getMessage());

            nLineNumber = e.getnLinha();

            nStartIndex = jTextAreaCodigo.getLineStartOffset(nLineNumber - 1);
            nEndIndex = jTextAreaCodigo.getLineEndOffset(nLineNumber - 1);

            jTextAreaCodigo.setCaretPosition(nStartIndex);
            jTextAreaCodigo.setSelectionColor(Color.red);

            Highlighter hHighlight = jTextAreaCodigo.getHighlighter();
            hHighlight.removeAllHighlights();

            hHighlight.addHighlight(nStartIndex, nEndIndex, DefaultHighlighter.DefaultPainter);

            jTextAreaCodigo.requestFocus();

        } catch (BadLocationException ex) {
            Logger.getLogger(FrameCompilador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setaLinhaColuna() {
        int caretPos = jTextAreaCodigo.getCaretPosition();
        int offset;
        int rowNum = (caretPos == 0) ? 1 : 0;

        for (offset = caretPos; offset > 0;) {
            try {
                offset = Utilities.getRowStart(jTextAreaCodigo, offset) - 1;
            } catch (BadLocationException ex) {
                Logger.getLogger(FrameCompilador.class.getName()).log(Level.SEVERE, null, ex);
            }
            rowNum++;
        }
        try {
            offset = Utilities.getRowStart(jTextAreaCodigo, caretPos);
        } catch (BadLocationException ex) {
            Logger.getLogger(FrameCompilador.class.getName()).log(Level.SEVERE, null, ex);
        }

        int colNum = caretPos - offset + 1;

        jTextFieldLinhaColuna.setText("Linha: " + rowNum + ", Coluna: " + colNum);
    }

    private class ClockRunnable implements Runnable {

        private SimpleDateFormat sdf;

        public ClockRunnable() {
            sdf = new SimpleDateFormat("EEE, d MMM yyyy '-' HH:mm:ss");
        }

        @Override
        public void run() {
            while (true) {
                try {
                    jLabelFooterTime.setText(sdf.format(new Date()));
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    System.out.printf(ex.getMessage());
                }
            }
        }
    ;

    }
        
   private String getPatchFile() throws IOException {
        JFileChooser arquivo = new JFileChooser();
        arquivo.setDialogTitle("Escolha o arquivo fonte");

        arquivo.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".txt") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Arquivos Fonte (.txt)\n";
            }
        }
        );

        int ret = arquivo.showOpenDialog(null);
        if (ret == JFileChooser.APPROVE_OPTION) {
            return (arquivo.getSelectedFile().getAbsolutePath());
        } else {
            return ("");
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabelCodigoFonte;
    private javax.swing.JLabel jLabelCodigoLinhas;
    private javax.swing.JLabel jLabelFooter;
    private javax.swing.JLabel jLabelFooterTime;
    private javax.swing.JLabel jLabelSaida;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemFechar;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvar;
    private javax.swing.JMenu jMenuSobre;
    private javax.swing.JPanel jPanelCompilacao;
    private javax.swing.JPanel jPanelFooter;
    private javax.swing.JScrollPane jScrollPaneAreaCodigo;
    private javax.swing.JScrollPane jScrollPaneAreaLinhas;
    private javax.swing.JPopupMenu.Separator jSeparatorArquivo;
    private javax.swing.JTextArea jTextAreaCodigo;
    private javax.swing.JTextArea jTextAreaLinhas;
    private javax.swing.JTextArea jTextAreaSaida;
    private javax.swing.JTextField jTextFieldLinhaColuna;
    // End of variables declaration//GEN-END:variables
    private String sPathArquivo;
    private File fCurrentFile;
}
