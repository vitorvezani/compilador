/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package maquinavirtual;

import java.awt.BorderLayout;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vitor Rodrigo Vezani && Pedro Henrique Grandin
 *
 *
 */
public class FrameMaquinaVirtual extends javax.swing.JFrame {

    /**
     * Creates new form FrameCompilador
     */
    public FrameMaquinaVirtual() {
        initComponents();
        this.setLocationRelativeTo(null);
        jRadioButtonPasso.setSelected(rootPaneCheckingEnabled);
        jButtonExecutar.setEnabled(false);
        jButtonParar.setEnabled(false);
        jTextSaidaDados.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupExecucao = new javax.swing.ButtonGroup();
        jPanelTipoExecucao = new javax.swing.JPanel();
        jRadioButtonNormal = new javax.swing.JRadioButton();
        jRadioButtonPasso = new javax.swing.JRadioButton();
        jScrollPaneCodigoMaquina = new javax.swing.JScrollPane();
        jTableCodigoMaquina = new javax.swing.JTable();
        jScrollPaneMemoria = new javax.swing.JScrollPane();
        jTableMemoria = new javax.swing.JTable();
        jLabelCodigoMaquina = new javax.swing.JLabel();
        jLabelMemoria = new javax.swing.JLabel();
        jLabelSaidaDeDados = new javax.swing.JLabel();
        jScrollSaidaDados = new javax.swing.JScrollPane();
        jTextSaidaDados = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jButtonExecutar = new javax.swing.JButton();
        jButtonParar = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemFechar = new javax.swing.JMenuItem();
        jSeparator = new javax.swing.JPopupMenu.Separator();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuSobre = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maquina Virtual");
        setResizable(false);

        jPanelTipoExecucao.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modo Execução", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanelTipoExecucao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        buttonGroupExecucao.add(jRadioButtonNormal);
        jRadioButtonNormal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRadioButtonNormal.setText("Normal");

        buttonGroupExecucao.add(jRadioButtonPasso);
        jRadioButtonPasso.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRadioButtonPasso.setText("Passo a passo");

        javax.swing.GroupLayout jPanelTipoExecucaoLayout = new javax.swing.GroupLayout(jPanelTipoExecucao);
        jPanelTipoExecucao.setLayout(jPanelTipoExecucaoLayout);
        jPanelTipoExecucaoLayout.setHorizontalGroup(
            jPanelTipoExecucaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTipoExecucaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTipoExecucaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonPasso)
                    .addComponent(jRadioButtonNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelTipoExecucaoLayout.setVerticalGroup(
            jPanelTipoExecucaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTipoExecucaoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonPasso, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelTipoExecucaoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jRadioButtonNormal, jRadioButtonPasso});

        jTableCodigoMaquina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linha", "Instrução", "Atributo 1", "Atributo 2", "Comentário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCodigoMaquina.getTableHeader().setReorderingAllowed(false);
        jScrollPaneCodigoMaquina.setViewportView(jTableCodigoMaquina);
        if (jTableCodigoMaquina.getColumnModel().getColumnCount() > 0) {
            jTableCodigoMaquina.getColumnModel().getColumn(0).setMinWidth(50);
            jTableCodigoMaquina.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTableCodigoMaquina.getColumnModel().getColumn(0).setMaxWidth(50);
            jTableCodigoMaquina.getColumnModel().getColumn(1).setResizable(false);
            jTableCodigoMaquina.getColumnModel().getColumn(1).setPreferredWidth(8);
            jTableCodigoMaquina.getColumnModel().getColumn(2).setResizable(false);
            jTableCodigoMaquina.getColumnModel().getColumn(2).setPreferredWidth(8);
            jTableCodigoMaquina.getColumnModel().getColumn(3).setResizable(false);
            jTableCodigoMaquina.getColumnModel().getColumn(3).setPreferredWidth(8);
            jTableCodigoMaquina.getColumnModel().getColumn(4).setResizable(false);
            jTableCodigoMaquina.getColumnModel().getColumn(4).setPreferredWidth(200);
        }

        jTableMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Endereço", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneMemoria.setViewportView(jTableMemoria);
        if (jTableMemoria.getColumnModel().getColumnCount() > 0) {
            jTableMemoria.getColumnModel().getColumn(0).setResizable(false);
            jTableMemoria.getColumnModel().getColumn(0).setPreferredWidth(8);
            jTableMemoria.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabelCodigoMaquina.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelCodigoMaquina.setText("Código de Máquina");

        jLabelMemoria.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelMemoria.setText("Memória (Pilha)");

        jLabelSaidaDeDados.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelSaidaDeDados.setText("Saída de Dados");

        jTextSaidaDados.setColumns(20);
        jTextSaidaDados.setRows(5);
        jScrollSaidaDados.setViewportView(jTextSaidaDados);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setPreferredSize(new java.awt.Dimension(185, 115));

        jButtonExecutar.setText("Executar");
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jButtonParar.setText("Parar");
        jButtonParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPararActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonParar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButtonParar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuArquivo.setText("Arquivo");

        jMenuItemAbrir.setText("Abrir Arquivo");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemAbrir);

        jMenuItemFechar.setText("Fechar Arquivo");
        jMenuItemFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFecharActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemFechar);
        jMenuArquivo.add(jSeparator);

        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemSair);

        jMenuBar.add(jMenuArquivo);

        jMenuSobre.setText("Sobre");
        jMenuSobre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuSobreMouseClicked(evt);
            }
        });
        jMenuBar.add(jMenuSobre);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollSaidaDados, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSaidaDeDados))
                        .addGap(30, 30, 30)
                        .addComponent(jPanelTipoExecucao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabelCodigoMaquina)
                    .addComponent(jScrollPaneCodigoMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addComponent(jLabelMemoria)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCodigoMaquina)
                    .addComponent(jLabelMemoria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCodigoMaquina, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(jScrollPaneMemoria))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSaidaDeDados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollSaidaDados, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanelTipoExecucao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuSobreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSobreMouseClicked
        FrameSobre frameSobre = new FrameSobre();
        frameSobre.setLayout(new BorderLayout());
        frameSobre.setLocationRelativeTo(null);
        frameSobre.setVisible(true);
    }//GEN-LAST:event_jMenuSobreMouseClicked

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        System.exit(FrameMaquinaVirtual.EXIT_ON_CLOSE);
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
 
        setCaminho(chooseArq());

        abrirArquivo();

    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFecharActionPerformed

        limparTabela();

        desabilitarBotoes();
    }//GEN-LAST:event_jMenuItemFecharActionPerformed

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed

        modelTableCodigoMaquina = (DefaultTableModel) jTableCodigoMaquina.getModel();

        if (jRadioButtonNormal.isSelected()) {

            while (nLinhaExec < modelTableCodigoMaquina.getRowCount()) {

                executaLinha();

            }

            jButtonExecutar.setEnabled(false);
            jButtonParar.setText("Reiniciar");

        } else if (jRadioButtonPasso.isSelected()) {

            executaLinha();

            if (nLinhaExec >= modelTableCodigoMaquina.getRowCount()) {
                jButtonExecutar.setEnabled(false);
                jButtonParar.setText("Reiniciar");
            }

        }

    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jButtonPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPararActionPerformed

        reiniciarExecucao();

    }//GEN-LAST:event_jButtonPararActionPerformed

    public void organizeVector(String[][] lista) {

        int n = 0;

        while (n < modelTableCodigoMaquina.getRowCount()) {
            String sInstrucao = (String) modelTableCodigoMaquina.getValueAt(n, 1);

            if (sInstrucao.contains("JMP") || sInstrucao.contains("JMPF") || sInstrucao.contains("CALL")) {
                String sAtributo1 = (String) modelTableCodigoMaquina.getValueAt(n, 2);

                for (int i = 0; i < modelTableCodigoMaquina.getRowCount(); i++) {
                    try {
                        if (lista[i][1] != null) {
                            if (lista[i][1].equalsIgnoreCase(sAtributo1)) {
                                modelTableCodigoMaquina.setValueAt(lista[i][0], n, 2);
                            }
                        }
                    } catch (Exception e) {
                        continue;
                    }

                }
            }

            n++;
        }

    }

    /**
     * @param nLinhaExec the nLinhaExec to set
     */
    public void setnLinhaExec(int nLinhaExec) {
        this.nLinhaExec = nLinhaExec;
    }

    private void executaLinha() {

        modelTableCodigoMaquina = (DefaultTableModel) jTableCodigoMaquina.getModel();
        modelTableMemoria = (DefaultTableModel) jTableMemoria.getModel();

        modelTableMemoria.setRowCount(300);

        int nLinha, nAtributo1, nAtributo2;
        String sInstrucao, sInstrucaoAux;

        selecionaLinha();

        nLinha = Integer.parseInt(modelTableCodigoMaquina.getValueAt(nLinhaExec, 0).toString());
        sInstrucaoAux = (String) modelTableCodigoMaquina.getValueAt(nLinhaExec, 1);
        sInstrucao = sInstrucaoAux.trim();

        try {
            nAtributo1 = new Integer(modelTableCodigoMaquina.getValueAt(nLinhaExec, 2).toString());
        } catch (Exception x) {
            nAtributo1 = 0;
        }

        try {
            nAtributo2 = new Integer(modelTableCodigoMaquina.getValueAt(nLinhaExec, 3).toString());
        } catch (Exception x) {
            nAtributo2 = 0;
        }

        System.out.println(nLinha + " " + sInstrucao + " " + nAtributo1 + " " + nAtributo2);

        switch (sInstrucao) {
            case "START":
                System.out.println("Começa programa");
                //S:=-1
                nIndex = -1;
                modelTableCodigoMaquina.setValueAt("S:=-1", nLinhaExec, 4);
                nLinhaExec++;
                break;
            case "LDC":
                System.out.println("Carregar constante");
                //S:=s + 1 ; M [s]: = k
                nIndex++;
                pilha[nIndex] = nAtributo1;
                
                modelTableCodigoMaquina.setValueAt("S:=s + 1 ; M [s]: = k", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(nIndex, nIndex, 0);
                modelTableMemoria.setValueAt(nAtributo1, nIndex, 1);
                nLinhaExec++;

                break;
            case "LDV":
                System.out.println("Carregar valor");
                //S:=s + 1 ; M[s]:=M[n]
                nIndex++;
                pilha[nIndex] = pilha[nAtributo1];
                
                modelTableCodigoMaquina.setValueAt("S:=s + 1 ; M[s]:=M[n]", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(nIndex, nIndex, 0);
                modelTableMemoria.setValueAt(pilha[nAtributo1], nIndex, 1);

                nLinhaExec++;

                break;
            case "ADD":
                System.out.println("Somar");
                //M[s-1]:=M[s-1] + M[s]; s:=s - 1
                pilha[nIndex - 1] = pilha[(nIndex - 1)] + pilha[nIndex];
                
                modelTableCodigoMaquina.setValueAt("M[s-1]:=M[s-1] + M[s]; s:=s - 1", nLinhaExec, 4);
                modelTableMemoria.setValueAt(pilha[(nIndex - 1)], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);
                nIndex--;
                nLinhaExec++;

                break;
            case "SUB":
                System.out.println("Subtrair");
                //M[s-1]:=M[s-1] - M[s]; s:=s - 1
                pilha[nIndex - 1] = pilha[(nIndex - 1)] - pilha[nIndex];
                
                modelTableCodigoMaquina.setValueAt("M[s-1]:=M[s-1] - M[s]; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[(nIndex - 1)], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);
                nIndex--;
                nLinhaExec++;

                break;
            case "MULT":
                System.out.println("Multiplicar");
                //M[s-1]:=M[s-1] * M[s]; s:=s - 1
                pilha[nIndex - 1] = pilha[(nIndex - 1)] * pilha[nIndex];
                modelTableCodigoMaquina.setValueAt("M[s-1]:=M[s-1] * M[s]; s:=s - 1", nLinhaExec, 4);
                modelTableMemoria.setValueAt(pilha[(nIndex - 1)], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);
                nIndex--;
                nLinhaExec++;

                break;
            case "DIVI":
                System.out.println("(Dividir)");
                //M[s-1]:=M[s-1] / M[s]; s:=s - 1
                pilha[nIndex - 1] = pilha[(nIndex - 1)] / pilha[nIndex];
                modelTableCodigoMaquina.setValueAt("M[s-1]:=M[s-1] / M[s]; s:=s - 1", nLinhaExec, 4);
                modelTableMemoria.setValueAt(pilha[(nIndex - 1)], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);
                nIndex--;
                nLinhaExec++;

                break;
            case "INV":
                System.out.println("Inverter sinal");
                //M[s]:= -M[s]
                pilha[nIndex] = pilha[nIndex] * -1;
                modelTableCodigoMaquina.setValueAt("M[s]:= -M[s]", nLinhaExec, 4);
                modelTableMemoria.setValueAt(pilha[(nIndex)] * -1, nIndex, 1);
                nLinhaExec++;

                break;
            case "AND":
                System.out.println("Conjunção");
                //se M [s-1] = 1 e M[s] = 1 então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] == 1 && pilha[nIndex] == 1) {
                    pilha[nIndex - 1] = 1;

                } else {
                    pilha[nIndex - 1] = 0;
                }
                modelTableCodigoMaquina.setValueAt("se M [s-1] = 1 e M[s] = 1 então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;


                break;
            case "OR":
                System.out.println("Disjunção");
                //se M[s-1] = 1 ou M[s] = 1 então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] == 1 || pilha[nIndex] == 1) {
                    pilha[nIndex - 1] = 1;

                } else {
                    pilha[nIndex - 1] = 0;

                }
                modelTableCodigoMaquina.setValueAt("se M [s-1] = 1 ou M[s] = 1 então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;

                break;
            case "NEG":
                System.out.println("Negação");
                //M[s]:=1 - M[s]

                pilha[nIndex] = 1 - pilha[nIndex];
                modelTableCodigoMaquina.setValueAt("M[s]:=1 - M[s]", nLinhaExec, 4);
                modelTableMemoria.setValueAt(1 - pilha[nIndex], nIndex, 1);
                nLinhaExec++;

                break;
            case "CME":
                System.out.println("Comparar menor");
                //se M[s-1] < M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] < pilha[nIndex]) {
                    pilha[nIndex - 1] = 1;

                } else {
                    pilha[nIndex - 1] = 0;

                }
                modelTableCodigoMaquina.setValueAt("se M[s-1] < M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;

                break;
            case "CMA":
                System.out.println("Comparar maior");
                //se M[s-1] > M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] > pilha[nIndex]) {
                    pilha[nIndex - 1] = 1;

                } else {
                    pilha[nIndex - 1] = 0;

                }
                modelTableCodigoMaquina.setValueAt("se M[s-1] > M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;

                break;
            case "CEQ":
                System.out.println("Comparar igual");
                //se M[s-1] = M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] == pilha[nIndex]) {
                    pilha[nIndex - 1] = 1;
                } else {
                    pilha[nIndex - 1] = 0;
                }
                modelTableCodigoMaquina.setValueAt("se M[s-1] = M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;
                break;
            case "CDIF":
                System.out.println("Comparar desigual");
                //se M[s-1] ≠ M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] != pilha[nIndex]) {
                    pilha[nIndex - 1] = 1;
                } else {
                    pilha[nIndex - 1] = 0;
                }
                modelTableCodigoMaquina.setValueAt("se M[s-1] != M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;

                break;
            case "CMEQ":
                System.out.println("Comparar menor ou igual");
                //e M[s-1] ≤ M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] <= pilha[nIndex]) {
                    pilha[nIndex - 1] = 1;
                } else {
                    pilha[nIndex - 1] = 0;
                }
                modelTableCodigoMaquina.setValueAt("se M[s-1] <= M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;

                break;
            case "CMAQ":
                System.out.println("Comparar maior ou igual");
                //se M[s-1] ≥ M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1

                if (pilha[nIndex - 1] >= pilha[nIndex]) {
                    pilha[nIndex - 1] = 1;
                } else {
                    pilha[nIndex - 1] = 0;
                }
                modelTableCodigoMaquina.setValueAt("se M[s-1] => M[s] então M[s-1]:=1 senão M[s-1]:=0; s:=s - 1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex - 1], nIndex - 1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;

                break;
            case "HLT":
                System.out.println("Termina Execução");
                jButtonExecutar.setEnabled(false);
                modelTableCodigoMaquina.setValueAt("Termina Execução", nLinhaExec, 4);
                nLinhaExec++;

                break;
            case "STR":
                System.out.println("Armazenar valor");
                //M[n]:=M[s]; s:=s-1

                pilha[nAtributo1] = pilha[nIndex];
                
                modelTableCodigoMaquina.setValueAt("M[n]:=M[s]; s:=s-1", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(pilha[nIndex], nAtributo1, 1);
                modelTableMemoria.removeRow(nIndex);

                nIndex--;
                nLinhaExec++;

                break;
            case "JMP":
                System.out.println("Desviar sempre");
                //i:= t
                modelTableCodigoMaquina.setValueAt("i:=t", nLinhaExec, 4);
                nLinhaExec = nAtributo1;
                break;
            case "JMPF":
                System.out.println("Desviar se falso");
                //se M[s] = 0 então i:=t senão i:=i + 1; s:=s-1
                
                modelTableCodigoMaquina.setValueAt("se M[s] = 0 então i:=t senão i:=i + 1; s:=s-1", nLinhaExec, 4);
                
                if (pilha[nIndex] == 0) {
                    nLinhaExec = nAtributo1;
                } else {
                    nLinhaExec++;
                }
                
                modelTableMemoria.removeRow(nIndex);
                nIndex--;

                break;
            case "NULL":
                System.out.println("Nulo");
                modelTableCodigoMaquina.setValueAt("Faz nada", nLinhaExec, 4);
                nLinhaExec++;
                break;
            case "RD":
                System.out.println("Leitura");
                //S:=s + 1; M[s]:= “próximo valor de entrada”

                String opcao = null;

                nIndex++;

                while (opcao == null || opcao.isEmpty()) {
                    opcao = JOptionPane.showInputDialog("Digite um valor?");
                }

                try {
                    pilha[nIndex] = new Integer(opcao);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "'" + opcao + "' não é um numero execute novamente!");
                    System.exit(1);
                }
                
                modelTableCodigoMaquina.setValueAt("S:=s + 1; M[s]:= “próximo valor de entrada”", nLinhaExec, 4);
                
                modelTableMemoria.setValueAt(nIndex, nIndex, 0);
                modelTableMemoria.setValueAt(pilha[nIndex], nIndex, 1);

                nLinhaExec++;

                break;
            case "PRN":
                System.out.println("Impressão");
                //“Imprimir M[s]”; s:=s-1

                jTextSaidaDados.append(pilha[nIndex] + "\n");

                modelTableMemoria.removeRow(nIndex);
                modelTableCodigoMaquina.setValueAt("“Imprimir M[s]”; s:=s-1", nLinhaExec, 4);
                nIndex--;
                nLinhaExec++;

                break;
            case "ALLOC":
                System.out.println("Alocar memória");
                //Para k:=0 até n-1 faça
                for (int i = 0; i <= nAtributo2 - 1; i++) {
                    //{s:=s + 1; M[s]:=M[m+k]}

                    nIndex++;
                    pilha[nIndex] = pilha[nAtributo1 + i];

                    modelTableMemoria.setValueAt(nIndex, nIndex, 0);

                    if (pilha[nIndex] == 0) {
                        modelTableMemoria.setValueAt(null, nIndex, 1);
                    } else {
                        modelTableMemoria.setValueAt(pilha[nIndex], nIndex, 1);
                    }
                }
                modelTableCodigoMaquina.setValueAt("Para k:=0 até n-1 faça{s:=s + 1; M[s]:=M[m+k]}", nLinhaExec, 4);
                
                nLinhaExec++;

                break;
            case "DALLOC":
                System.out.println("Desalocar memória");
                //Para k:=n-1 até 0 faça
                for (int i = nAtributo2 - 1; i >= 0; i--) {
                    //{M[m+k]:=M[s]; s:=s - 1}

                    pilha[nAtributo1 + i] = pilha[nIndex];

                    modelTableMemoria.setValueAt(nAtributo1, nAtributo1 + i, 0);
                    modelTableMemoria.setValueAt(pilha[nIndex], nAtributo1 + i, 1);
                    modelTableMemoria.removeRow(nIndex);
                    nIndex--;
                }
                modelTableCodigoMaquina.setValueAt("Para k:=0 até 0 faça{M[m+k]:=M[s]; s:=s - 1}", nLinhaExec, 4);
                nLinhaExec++;

                break;
            case "CALL":
                System.out.println("Chamar procedimento ou função");
                //S:=s + 1; M[s]:=i + 1; i:=t
                nIndex++;
                pilha[nIndex] = nLinhaExec + 1;
                modelTableCodigoMaquina.setValueAt("S:=s + 1; M[s]:=i + 1; i:=t", nLinhaExec, 4);
                nLinhaExec = nAtributo1;
                modelTableMemoria.setValueAt(nIndex, nIndex, 0);
                modelTableMemoria.setValueAt(pilha[nIndex], nIndex, 1);

                break;
            case "RETURN":
                System.out.println("Retornar de procedimento");
                //i:=M[s]; s:=s - 1
                modelTableCodigoMaquina.setValueAt("i:=M[s]; s:=s - 1", nLinhaExec, 4);
                
                nLinhaExec = pilha[nIndex];

                modelTableMemoria.removeRow(nIndex);
                nIndex--;

                break;
            case "RETURNF":
                System.out.println("Retornar de função");
               
                //Para k:=n-1 até 0 faça
                for (int i = nAtributo2 - 1; i >= 0; i--) {
                    //{M[m+k]:=M[s]; s:=s - 1}

                    pilha[nAtributo1 + i] = pilha[nIndex-1];
                    pilha[nIndex-1] = pilha[nIndex];

                    modelTableMemoria.setValueAt(nAtributo1, nAtributo1 + i, 0);
                    modelTableMemoria.setValueAt(pilha[nIndex], nAtributo1 + i, 1);
                    modelTableMemoria.removeRow(nIndex);
                    nIndex--;
                }
                modelTableCodigoMaquina.setValueAt("Para k:=0 até 0 faça{M[m+k]:=M[s]; s:=s - 1} e i:=M[s]; s:=s - 1", nLinhaExec, 4);

                nLinhaExec = pilha[nIndex-1];
                modelTableMemoria.removeRow(nIndex);
                pilha[nIndex-1] = pilha[nIndex];
                nIndex--;
               

                break;
            default:
                System.out.println("Comando inválido!");
        }
    }

    private void limparTabela() {

        jTextSaidaDados.setText("");

        modelTableMemoria = (DefaultTableModel) jTableMemoria.getModel();
        modelTableMemoria.getDataVector().removeAllElements();
        modelTableMemoria.fireTableDataChanged(); // notifies the JTable that the model has changed

        modelTableCodigoMaquina = (DefaultTableModel) jTableCodigoMaquina.getModel();
        modelTableCodigoMaquina.getDataVector().removeAllElements();
        modelTableCodigoMaquina.fireTableDataChanged(); // notifies the JTable that the model has changed

        nIndex = 0;
        nLinhaExec = 0;
    }

    private void reiniciarExecucao() {

        abrirArquivo();

        selecionaLinha();
    }

    private void selecionaLinha() {

        //Seleciona a linha e move a tabela.
        jTableCodigoMaquina.setRowSelectionInterval(nLinhaExec, nLinhaExec);
        jTableCodigoMaquina.scrollRectToVisible(new Rectangle(jTableCodigoMaquina.getCellRect(nLinhaExec, 0, true)));
    }

    private void abrirArquivo() {
        int nLinhaLista = 0;
        nLinha = 0;

        pilha = new int[300];

        modelTableCodigoMaquina = (DefaultTableModel) jTableCodigoMaquina.getModel();
        modelTableMemoria = (DefaultTableModel) jTableMemoria.getModel();

        limparTabela();

        jButtonExecutar.setEnabled(true);
        jButtonParar.setEnabled(true);
        jButtonParar.setText("Parar");

        try (BufferedReader br = new BufferedReader(new FileReader(getCaminho()))) {
            int nLinhas = quantidadeLinhaArquivo();
            String[][] nLista = new String[nLinhas][2];
            
            String sCurrentLine;

            while ((sCurrentLine = br.readLine()) != null) {

                String sAtributoInst = null, sAtributo1 = null, sAtributo2 = null;

                StringTokenizer st = new StringTokenizer(sCurrentLine);

                if (st.hasMoreElements()) {
                    sAtributoInst = st.nextToken(" \t");

                }

                if (st.hasMoreElements()) {
                    sAtributo1 = st.nextToken(" \t");

                    if (sAtributo1.contains("NULL")) {
                        nLista[nLinhaLista][0] = nLinha + "";

                        nLista[nLinhaLista][1] = sAtributoInst;

                        sAtributoInst = sAtributo1;
                        sAtributo1 = null;
                        nLinhaLista++;

                    }

                }
                if (st.hasMoreElements()) {
                    sAtributo2 = st.nextToken(" \t");

                }

                String[] linha = new String[]{nLinha + "", sAtributoInst, sAtributo1, sAtributo2};

                System.out.println("Linha: " + nLinha + " " + sAtributoInst + " " + sAtributo1 + " " + sAtributo2);

                nLinha++;

                modelTableCodigoMaquina.addRow(linha);

            }

            organizeVector(nLista);
            selecionaLinha();

        } catch (IOException e) {
            jButtonExecutar.setEnabled(false);
            jButtonParar.setEnabled(false);
            System.out.println(e.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrameMaquinaVirtual().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupExecucao;
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JButton jButtonParar;
    private javax.swing.JLabel jLabelCodigoMaquina;
    private javax.swing.JLabel jLabelMemoria;
    private javax.swing.JLabel jLabelSaidaDeDados;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemFechar;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenu jMenuSobre;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelTipoExecucao;
    private javax.swing.JRadioButton jRadioButtonNormal;
    private javax.swing.JRadioButton jRadioButtonPasso;
    private javax.swing.JScrollPane jScrollPaneCodigoMaquina;
    private javax.swing.JScrollPane jScrollPaneMemoria;
    private javax.swing.JScrollPane jScrollSaidaDados;
    private javax.swing.JPopupMenu.Separator jSeparator;
    private javax.swing.JTable jTableCodigoMaquina;
    private javax.swing.JTable jTableMemoria;
    private javax.swing.JTextArea jTextSaidaDados;
    // End of variables declaration//GEN-END:variables
    private String caminho;
    private int nLinhaExec = -1;
    private DefaultTableModel modelTableCodigoMaquina;
    private DefaultTableModel modelTableMemoria;
    private int nIndex;
    private int pilha[];
    private int nLinha;

    /**
     * @return the caminho
     */
    public String getCaminho() {
        return caminho;
    }

    /**
     * @param caminho the caminho to set
     */
    public void setCaminho(String caminho) {
        this.caminho = caminho;
    }

    private void desabilitarBotoes() {
        jButtonExecutar.setEnabled(false);
        jButtonParar.setEnabled(false);
    }

    private int quantidadeLinhaArquivo(){
        File arquivoLeitura = new File(caminho);

        LineNumberReader linhaLeitura = null;

        try {
            linhaLeitura = new LineNumberReader(new FileReader(arquivoLeitura));
            linhaLeitura.skip(arquivoLeitura.length());
        } catch (Exception ex) {
            Logger.getLogger(FrameMaquinaVirtual.class.getName()).log(Level.SEVERE, null, ex);
        }

        return linhaLeitura.getLineNumber();
    }
    
       public String chooseArq() { 
        JFileChooser arquivo = new JFileChooser();
        arquivo.setDialogTitle("Escolha do arquivo Objeto");
                
        arquivo.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".obj") || f.isDirectory();
            }
            @Override
            public String getDescription() {
                return "Arquivos objeto (.obj)\n";
            }
        }
        );
        
        int ret = arquivo.showOpenDialog(null);
        if(ret == JFileChooser.APPROVE_OPTION)
           return (arquivo.getSelectedFile().getAbsolutePath());
        else
            return("");
        
   }
}